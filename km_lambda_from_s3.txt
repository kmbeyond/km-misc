

-----------------------------code

import os, json, boto3, traceback
from datetime import datetime

#import logging
#logging.basicConfig(level=logging.ERROR)
#logger = logging.getLogger(__name__)

job_run_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:00')
processed_file_dir_prefix="km_lambda_processed/"
filename_timestamp = datetime.now().strftime('%Y%m%d%H%M%S')

def lambda_handler(event, context):
    event_source = "S3"
    try:
        print(f"Event from S3={event}")
        print(f"context: {context}")
        #bucket_name="km-test-bucket"
        bucket_name = event.get("Records")[0].get("s3").get("bucket").get("name")
        file_name_w_prefix = event.get("Records")[0].get("s3").get("object").get("key")
        print(f"Event from: s3://{bucket_name}/{file_name_w_prefix}")
        
        s3 = boto3.client('s3')
        file_to_process = s3.get_object(Bucket=bucket_name, Key=file_name_w_prefix)
        contents = file_to_process['Body'].read()
        print(f"File contents: {contents}")
    
        
        file_name_wo_prefix = os.path.basename(file_name_w_prefix)
        processed_file_name = f"{filename_timestamp}_{file_name_wo_prefix}"
        print(f"Save file to: s3://{bucket_name}/{processed_file_dir_prefix}{processed_file_name}")
        s3 = boto3.resource("s3")
        s3.Object(bucket_name, f"{processed_file_dir_prefix}"+processed_file_name) \
          .copy_from(CopySource=bucket_name+'/'+file_name_w_prefix)
        #print(f"Deleting file: {bucket_name}/{file_name_w_prefix}")
        #s3.Object(bucket_name, file_name_w_prefix).delete()
        print(f"-> Completed")

        return {
            'statusCode': 200,
            'body': json.dumps('Lambda executed successfully')
        }
    except Exception:
        sns_client = boto3.client("sns")
        error_dtl = str(traceback.format_exc())
        print(f"EXCEPTION: {error_dtl}")
        sns_topic_arn = "arn:aws:sns:us-east-1:111:km_test_sns_east_1"
        msg_subject = "Exception Processing event from "+event_source
        msg_body = f"Error Message = {error_dtl}"
        #GOES IN LOOP: sns_client.publish(TopicArn=sns_topic_arn, Message=msg_body, Subject=msg_subject)
        raise SystemExit(2)

