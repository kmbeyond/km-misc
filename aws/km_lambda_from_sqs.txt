

---------------------------------------------Code
import json, boto3, traceback

#import logging
#logging.basicConfig(level=logging.ERROR)
#logger = logging.getLogger(__name__)

def km_poll_sqs_messages(aws_account, region_name, queue_name):
    print(f"Poll SQS Queue: {queue_name}")

    sqs = boto3.client("sqs", endpoint_url=f"https://sqs.{region_name}.amazonaws.com", region_name=region_name)
    queue_url = f"https://queue.amazonaws.com/{aws_account}/{queue_name}"
    resp = sqs.receive_message(QueueUrl=queue_url, MaxNumberOfMessages=10, VisibilityTimeout=0)
    for itm in resp['Messages']:
        receipt_handle = itm['ReceiptHandle']
        print(f"----> {itm}")
        print(f"----> {itm.get('Body')}")
        #sqs.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)
        #print(f"----> Deleted receipt_handle: {receipt_handle}")


def km_delete_sqs_message(aws_account, region_name, queue_name, receipt_handle):
    print(f"Poll SQS Queue: {queue_name}")

    sqs = boto3.client("sqs", endpoint_url=f"https://sqs.{region_name}.amazonaws.com", region_name=region_name)
    queue_url = f"https://queue.amazonaws.com/{aws_account}/{queue_name}"
    print(f"----> Deleting message handle: {receipt_handle}")
    sqs.delete_message(QueueUrl=queue_url, ReceiptHandle=receipt_handle)
    print(f"----> Deleted receipt_handle: {receipt_handle}")


def lambda_handler(event, context):
    event_source = "SQS"
    try:
        print(f"Event={event}")
        message = event['Records'][0]['body']
        #print(f"Message from SQS: {message}")
    
        aws_account = "111"
        region_name = "us-east-1"
        queue_name = "km_test_sqs_east_1"
        
        #-----if polling queue
        #job_run_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:00')
        #km_poll_sqs_messages(aws_account, region_name, queue_name)
        
        for record in event["Records"]:
            print(f"Message Item: {record}")
            #print(f"--> Body: {record['body']}")
            km_delete_sqs_message(aws_account, region_name, queue_name, record['receiptHandle'])
        
        return {
            'statusCode': 200,
            'body': json.dumps('Lambda executed successfully')
        }
    except Exception:
        sns_client = boto3.client("sns")
        error_dtl = str(traceback.format_exc())
        print(f"EXCEPTION: {error_dtl}")
        sns_topic_arn = "arn:aws:sns:us-east-1:111:km_test_sns_east_1"
        msg_subject = "Exception Processing event from "+event_source
        msg_body = f"Error Message = {error_dtl}"
        #GOES IN LOOP: sns_client.publish(TopicArn=sns_topic_arn, Message=msg_body, Subject=msg_subject)
        raise SystemExit(2)

